<!-- 
With readOnly flag there are not query limits
This page should be only used by admin to migrte public and private legacy notes
-->
<apex:page controller="NMTNotesMigrationController" sidebar="false" title="Notes Conversion" id="bulkMigration" readOnly="true" docType="html-5.0">
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <apex:includeScript value="{!URLFOR($Resource.NMTjs, 'js/jquery_3_1_1.min.js')}"/>
        <apex:slds />
        
        <style>
            .notesToMigrateInputs{
            background-color: #fff;
            color: #16325c;
            border: 1px solid #d8dde6;
            border-radius: .25rem;
            width: 40%;
            transition: border .1s linear,background-color .1s linear; 
            padding: 0 1rem 0 .75rem;
            }
            .inProgressLabel{
            background: #F7B64B !important;  
            color: #00008B !important; 
            font-weight: 900;
            text-transform: none !important;
            margin-top: 5% !important;
            margin-bottom: 5% !important;
            }
            
            .dateFormat{
            visibility:hidden;
            display: none;
            }
            .locationError { color: red; font-weight: strong;}
        </style>
        <script>
        j$ = jQuery.noConflict();
        j$( document ).ready(function() {
            checkInProgress();
            j$("#bulkMigration\\:form\\:theCountButton").click();
            //j$("#bulkMigration\\:form\\:startDateIdOpp").blur();
            swapYears();
            checkSalesforceErrorRemote();
        });
        
        function setFocusOnLoad() {}
        
        function setdatepicker(){
            
            var inProgressOtherTool = document.getElementById('inProgress').style.display;
            if(inProgressOtherTool == "inline"){
                document.getElementById('bulkMigration:form:notesPerObjectTable:selectUnselectAllObjectsCheckbox').disabled = true;
                j$('#bulkMigration\\:form\\:notesPerObjectTable tr').each(function(index) {
                    console.log('notesPerObjectTable ' + index);
                    var objectCheckbox = document.getElementById('bulkMigration:form:notesPerObjectTable:'+index+':objectCheckbox');
                    var disabled = j$('#bulkMigration\\:form\\:notesPerObjectTable\\:'+index+'\\:objectCheckbox').is(":disabled");
                    if(objectCheckbox && !disabled){
                        console.log('checkbox ' + index);
                        document.getElementById('bulkMigration:form:notesPerObjectTable:'+index+':objectCheckbox').disabled = true;
                    }
                });
            }
            document.getElementById('bulkMigration:form:startDateIdOpp').readOnly = true;
            document.getElementById('bulkMigration:form:endDateIdOpp').readOnly = true;
        }
        
        //used to check if a migration is already in progress and disable any change of users try to start an other one
        function checkInProgress(){
            var inProgress = document.getElementById('bulkMigration:form:byIdToMigrate').disabled;
            if(inProgress){
                document.getElementById('byIdCheckbox').disabled = true;
                document.getElementById('byObjectIdCheckbox').disabled = true;
                document.getElementById('byObjectCheckbox').disabled = true;
                document.getElementById('bulkMigration:form:theCountButton').disabled = true;
                document.getElementById('bulkMigration:form:optionOrderBy:0').disabled = true;
                document.getElementById('bulkMigration:form:optionOrderBy:1').disabled = true;
                document.getElementById('bulkMigration:form:unmigratedNotesPerObjectPanel').style.display = 'none';
                document.getElementById('bulkMigration:form:migratedNotesPerObjectPanel').style.display = 'none';
                document.getElementById('bulkMigration:form:quantityNotesPanel').style.display = 'none';
            } else {
                
                var toConverted = document.getElementById("toConvert").innerHTML;
                var ceroToConvert = toConverted.indexOf(" 0");
                document.getElementById('bulkMigration:form:quantityNotesPanel').style.display = 'inline';
                document.getElementById('bulkMigration:form:migratedNotesPerObjectPanel').style.display = 'inline';
                if(ceroToConvert < 0){
                    document.getElementById('bulkMigration:form:unmigratedNotesPerObjectPanel').style.display = 'inline';
                    document.getElementById('byIdCheckbox').disabled = false;
                    document.getElementById('byObjectIdCheckbox').disabled = false;
                    document.getElementById('byObjectCheckbox').disabled = false;
                } else {
                    document.getElementById('bulkMigration:form:unmigratedNotesPerObjectPanel').style.display = 'none';
                    document.getElementById('byIdCheckbox').disabled = true;
                    document.getElementById('byObjectIdCheckbox').disabled = true;
                    document.getElementById('byObjectCheckbox').disabled = true;
                }
                var converted = document.getElementById("converted").innerHTML;
                var ceroConverted = converted.indexOf(" 0");
            }
        } 
        
        //in case user click on the select all button we need to check every object or not depending in the case 
        function selectUnselectAllObjects(){
            var allObjectsSelected = document.getElementById('bulkMigration:form:notesPerObjectTable:selectUnselectAllObjectsCheckbox').checked;
            j$('#bulkMigration\\:form\\:notesPerObjectTable tr').each(function(index) {
                var objectCheckbox = document.getElementById('bulkMigration:form:notesPerObjectTable:'+index+':objectCheckbox');
                var disabled = j$('#bulkMigration\\:form\\:notesPerObjectTable\\:'+index+'\\:objectCheckbox').is(":disabled");
                if(objectCheckbox && !disabled){
                    objectCheckbox.checked = allObjectsSelected; 
                }
            });
            enableDisableMigrateButton();
        }
        
        //used to unselect all object (refresh byObject view) when user change of migation option from byObject to byIdObject or byId
        function unselectObjects(){
            j$('#bulkMigration\\:form\\:notesPerObjectTable tr').each(function(index) {
                var objectCheckbox = document.getElementById('bulkMigration:form:notesPerObjectTable:'+index+':objectCheckbox');
                if(objectCheckbox){
                    objectCheckbox.checked = false; 
                }
            });
        }
        
        //used to check if there is any object selected and active the migrate button OR in the case of
        //byId or byObjectId check if there is at list one character on the textbox
        function enableDisableMigrateButton(){
            var inProgressOtherTool = document.getElementById('inProgress').style.display;
            if(inProgressOtherTool == "inline"){
                var enableMigrateButton = false;
            } else {
                var enableMigrateButton = false;
                var allCheckbox = true;
                var byIdCheckbox = document.getElementById('byIdCheckbox').checked;
                var byIdValue= j$('#bulkMigration\\:form\\:byIdToMigrate').val();
                var byObjectIdCheckbox = document.getElementById('byObjectIdCheckbox').checked;
                var byObjectIdValue= j$('#bulkMigration\\:form\\:byObjectIdToMigrate').val();
                var byObjectCheckbox = document.getElementById('byObjectCheckbox').checked;
                
                if(byIdCheckbox &&  byIdValue.length > 0 || byObjectIdCheckbox && byObjectIdValue.length > 0){
                    if(byIdValue.length > 379 || byObjectIdValue.length > 379){
                        j$('#bulkMigration\\:form\\:byIdToMigrate').val(byIdValue.substring(0, 379));
                        j$('#bulkMigration\\:form\\:byObjectIdToMigrate').val(byObjectIdValue.substring(0, 379));
                    }
                    document.getElementById('migrateButton').disabled = false; 
                } else {
                    document.getElementById('migrateButton').disabled = true;
                }
                if(byObjectCheckbox){
                    j$('#bulkMigration\\:form\\:notesPerObjectTable tr').each(function(index) {
                        var checked = j$('#bulkMigration\\:form\\:notesPerObjectTable\\:'+index+'\\:objectCheckbox').is(":checked");
                        //in progress object migration are disables, because of that we have to ask for disabled property of the checkbox                      
                        var disabled = j$('#bulkMigration\\:form\\:notesPerObjectTable\\:'+index+'\\:objectCheckbox').is(":disabled");
                        var allChecked = j$('#bulkMigration\\:form\\:notesPerObjectTable\\:'+index+'\\:objectCheckbox');
                        var input = document.getElementById('bulkMigration:form:notesPerObjectTable:'+index+':notesToMigrate');
                        
                        if(checked && !disabled){
                            enableMigrateButton = true;
                            input.style.display = "inline";
                            
                        }else{
                            if(allChecked.length > 0 && !disabled){
                                allCheckbox = false;
                                input.style.display = "none";
                            }
                        }
                        
                    });
                    var noRecords = document.getElementById('bulkMigration:form:noRecords');
                    if(noRecords){
                        if(noRecords.value){                   
                            allCheckbox = false;
                            
                        }else{
                            allCheckbox = true;
                        }
                        
                    }
                    document.getElementById('bulkMigration:form:notesPerObjectTable:selectUnselectAllObjectsCheckbox').checked = allCheckbox; 
                    calculateTotalNotesToMigrate();
                }
            }
            document.getElementById('bulkMigration:form:theCountButton').disabled = false;
            document.getElementById('bulkMigration:form:optionOrderBy:0').disabled = false;
            document.getElementById('bulkMigration:form:optionOrderBy:1').disabled = false;
            
        }
        
        //mehtod used to check what type of migration user is trying to do and open the correct prompt 
        function migrationPrompt(){
            var byIdCheckbox = document.getElementById('byIdCheckbox').checked;
            var byObjectIdCheckbox = document.getElementById('byObjectIdCheckbox').checked;
            var byObjectCheckbox = document.getElementById('byObjectCheckbox').checked;
            if(byIdCheckbox){
                j$('#promptMigrateById').show();
                j$( "#modalMigrateById" ).toggleClass( "slds-backdrop--close" );
                j$( "#modalMigrateById" ).toggleClass( "slds-backdrop--open" );
            }
            if(byObjectIdCheckbox){
                j$('#promptMigrateByObjectId').show();
                j$( "#modalMigrateByObjectId" ).toggleClass( "slds-backdrop--close" );
                j$( "#modalMigrateByObjectId" ).toggleClass( "slds-backdrop--open" );
            }
            if(byObjectCheckbox){
                j$('#promptMigrateByObject').show();
                j$( "#modalMigrateByObject" ).toggleClass( "slds-backdrop--close" );
                j$( "#modalMigrateByObject" ).toggleClass( "slds-backdrop--open" );
            }
            
            
        }
        
        function deletePrompt(objectname){
            j$('#promptDelete').show();
            j$('#objectName').html(objectname);
            j$('#bulkMigration\\:form\\:objectToDelete').val(objectname);
            j$( "#modalDelete" ).toggleClass( "slds-backdrop--close" );
            j$( "#modalDelete" ).toggleClass( "slds-backdrop--open" );
        }
        
        function timeoutPrompt(timeout){
            j$('#promptTimeLimit').show();
            if(timeout){
                
                j$('#prompt-heading-div').removeClass("slds-theme--success");
                j$('#prompt-heading-div').addClass("slds-theme--error");
                j$("#"+'prompt-heading-div' + " > h2").html("Time Limit Exceeded");
                j$("#"+'prompt-p-div' + " > p").html("Try a shorter date range to avoid timeout errors.");
                
                
                
            }else{
                j$('#prompt-heading-div').addClass("slds-theme--success");
                j$('#prompt-heading-div').removeClass("slds-theme--error");
                j$("#"+'prompt-heading-div' + " > h2").html("Change Date Range");
                j$("#"+'prompt-p-div' + " > p").html("");
            }
            j$( "#modalTimeOut" ).toggleClass( "slds-backdrop--close" );
            j$( "#modalTimeOut" ).toggleClass( "slds-backdrop--open" );
        }
        
        function errorLimitPrompt(){
            j$('#errorLimitMsg').show();
        }
        
        function closeErrorModal(){
            j$('#errorLimitMsg').hide();
        }
        
        function errorLimitPromptMigrate(){
            j$('#errorLimitMsgMigrate').show();
        }
        
        function closeErrorModalMigrate(){
            j$('#errorLimitMsgMigrate').hide();
        }
        
        //mehtod used to check what type of migration user did and close the correct prompt 
        function closeMigrateModal(){
            var byIdCheckbox = document.getElementById('byIdCheckbox').checked;
            var byObjectIdCheckbox = document.getElementById('byObjectIdCheckbox').checked;
            var byObjectCheckbox = document.getElementById('byObjectCheckbox').checked;
            if(byIdCheckbox){
                j$('#promptMigrateById').hide();
                j$( "#modalMigrateById" ).toggleClass( "slds-backdrop--close" );
                j$( "#modalMigrateById" ).toggleClass( "slds-backdrop--open" );
            }
            if(byObjectIdCheckbox){
                j$('#promptMigrateByObjectId').hide();
                j$( "#modalMigrateByObjectId" ).toggleClass( "slds-backdrop--close" );
                j$( "#modalMigrateByObjectId" ).toggleClass( "slds-backdrop--open" );
            }
            if(byObjectCheckbox){
                j$('#promptMigrateByObject').hide();
                j$( "#modalMigrateByObject" ).toggleClass( "slds-backdrop--close" );
                j$( "#modalMigrateByObject" ).toggleClass( "slds-backdrop--open" );
            }
            
        }
        
        function closeInternalErrorModal(){
            j$('#promptInternalSalesforceError').hide();
            j$( "#modalInternalSalesforceError" ).toggleClass( "slds-backdrop--close" );
            j$( "#modalInternalSalesforceError" ).toggleClass( "slds-backdrop--open" );
        }
        
        function abortOperation(){
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.NMTNotesMigrationController.abortOperation}',
                function(result, event){
                    if (event.status) {
                        j$('#promptInternalSalesforceError').hide();
                        j$( "#modalInternalSalesforceError" ).toggleClass( "slds-backdrop--close" );
                        j$( "#modalInternalSalesforceError" ).toggleClass( "slds-backdrop--open" );
                        location.reload(true);
                    } else {
                        closeMigrateModal();
                        console.error('Error aborting the operation, message: '+event.message);
                    }
                }, 
                {escape: true}
            );
        }
        
        function closeDeleteModal(){
            j$('#promptDelete').hide();
            j$( "#modalDelete" ).toggleClass( "slds-backdrop--close" );
            j$( "#modalDelete" ).toggleClass( "slds-backdrop--open" );
        }
        
        function closeTimeoutModal(){
            j$('#promptTimeLimit').hide();
            j$( "#modalTimeOut" ).toggleClass( "slds-backdrop--close" );
            j$( "#modalTimeOut" ).toggleClass( "slds-backdrop--open" );
        }
        
        //method used to check what migration user is doing and collect the info that will pass on to the controller
        function runMigrationRemote(migrationType){
            document.getElementById('errorIdsMessage').innerHTML = '';
            closeMigrateModal();
            document.getElementById('runMigrationButtonById').style.pointerEvents = 'none';
            document.getElementById('runMigrationButtonByObjectId').style.pointerEvents = 'none';
            document.getElementById('runMigrationButtonByObject').style.pointerEvents = 'none';
            var objects = "";
            var byIdCheckbox = document.getElementById('byIdCheckbox').checked;
            var byObjectIdCheckbox = document.getElementById('byObjectIdCheckbox').checked;
            var byObjectCheckbox = document.getElementById('byObjectCheckbox').checked;
            if(byIdCheckbox){
                objects = document.getElementById('bulkMigration:form:byIdToMigrate').value.replace(/</g, "&lt;").replace(/>/g, "&gt;");
            }
            if(byObjectIdCheckbox){
                objects = document.getElementById('bulkMigration:form:byObjectIdToMigrate').value.replace(/</g, "&lt;").replace(/>/g, "&gt;");
            }
            
            sDate = document.getElementById('bulkMigration:form:sDate').innerHTML;
            eDate = document.getElementById('bulkMigration:form:eDate').innerHTML;
            var startDate = new Date(sDate.replace(" - ", "/").replace(" - ", "/"));
            var endDate = new Date(eDate.replace(" - ", "/").replace(" - ", "/"));
            
            if(byObjectCheckbox){
                j$('#bulkMigration\\:form\\:notesPerObjectTable tr').each(function(index) {
                    var input = document.getElementById('bulkMigration:form:notesPerObjectTable:'+index+':notesToMigrate');
                    var checked = j$('#bulkMigration\\:form\\:notesPerObjectTable\\:'+index+'\\:objectCheckbox').is(":checked");
                    var isDisable = j$('#bulkMigration\\:form\\:notesPerObjectTable\\:'+index+'\\:objectCheckbox').is(":disabled");
                    if(checked && !isDisable && input){                    
                        var objectName = j$('#bulkMigration\\:form\\:notesPerObjectTable\\:'+index+'\\:objectName').html();
                        var quantity = input.value;
                        
                        objects+=objectName+','+quantity+'|';
                        
                    }
                });
                
            }
            var checkedOption = j$('#bulkMigration\\:form\\:optionOrderBy\\:0').is(":checked");
            
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.NMTNotesMigrationController.runMigrationRemote}',
                objects, migrationType, startDate, endDate, checkedOption,
                function(result, event){
                    
                    if (event.status) {
                        
                        document.getElementById('byIdCheckbox').disabled = true;
                        document.getElementById('byObjectIdCheckbox').disabled = true;
                        document.getElementById('byObjectCheckbox').disabled = true;
                        document.getElementById('migrateButton').disabled = true;
                        document.getElementById('bulkMigration:form:theCountButton').disabled = true;
                        document.getElementById('bulkMigration:form:optionOrderBy:0').disabled = true;
                        document.getElementById('bulkMigration:form:optionOrderBy:1').disabled = true;
                        document.getElementById('bulkMigration:form:startDateIdOpp').onfocus = null;
                        document.getElementById('bulkMigration:form:endDateIdOpp').onfocus  = null;
                        document.getElementById('bulkMigration:form:unmigratedNotesPerObjectPanel').style.display = 'none';
                        document.getElementById('bulkMigration:form:byObjectIdPanel').style.display = 'none';
                        document.getElementById('bulkMigration:form:byIdPanel').style.display = 'none';
                        document.getElementById('bulkMigration:form:migratedNotesPerObjectPanel').style.display = 'none';
                        document.getElementById('bulkMigration:form:quantityNotesPanel').style.display = 'none';
                        document.getElementById('bulkMigration:form:inprogressLabel').style.display = 'inline';
                        document.getElementById('bulkMigration:form:inprogressLabel').value = 'In Progress';
                        
                        
                    } else if (event.type === 'exception') {  
                        closeMigrateModal();
                        console.error('Error running the migration, exception: '+event.where);
                        if(event.message.includes( 'STORAGE_LIMIT_EXCEEDED' )){
                            errorLimitPromptMigrate();
                        }
                        if(event.message.includes( 'Other Tool In Progress' )||event.message.includes( 'You don’t have permission' )){
                            location.reload(true);
                        }
                        
                        if(event.message.includes( 'ID' )){
                            if(byIdCheckbox){
                                j$( "#modalMigrateById" ).toggleClass( "slds-backdrop--open" );
                            }else{
                                j$( "#modalMigrateByObjectId" ).toggleClass( "slds-backdrop--open" );
                            }
                            document.getElementById('errorIdsMessage').style.color= "#C23934";
                            document.getElementById('errorIdsMessage').innerHTML = event.message;
                            document.getElementById('runMigrationButtonById').style.pointerEvents = 'auto';
                            document.getElementById('runMigrationButtonByObjectId').style.pointerEvents = 'auto';
                        }
                        if(event.message.includes( 'busy' )){
                            document.getElementById('promptOtherProcess').style.display = 'inline';
                            document.getElementById('messageOtherProcess').innerHTML = event.message;
                            document.getElementById('byIdCheckbox').disabled = true;
                            document.getElementById('byObjectIdCheckbox').disabled = true;
                            document.getElementById('byObjectCheckbox').disabled = true;
                            document.getElementById('migrateButton').disabled = true;
                            document.getElementById('bulkMigration:form:theCountButton').disabled = true;
                            document.getElementById('bulkMigration:form:optionOrderBy:0').disabled = true;
                            document.getElementById('bulkMigration:form:optionOrderBy:1').disabled = true;
                            document.getElementById('bulkMigration:form:startDateIdOpp').onfocus = null;
                            document.getElementById('bulkMigration:form:endDateIdOpp').onfocus  = null;
                            document.getElementById('bulkMigration:form:unmigratedNotesPerObjectPanel').style.display = 'none';
                            document.getElementById('bulkMigration:form:byObjectIdPanel').style.display = 'none';
                            document.getElementById('bulkMigration:form:byIdPanel').style.display = 'none';
                            document.getElementById('bulkMigration:form:migratedNotesPerObjectPanel').style.display = 'none';
                            document.getElementById('bulkMigration:form:quantityNotesPanel').style.display = 'none';
                            document.getElementById('bulkMigration:form:inprogressLabel').style.display = 'inline';
                            document.getElementById('bulkMigration:form:inprogressLabel').value = 'In Progress';
                            j$( "#modalMigrateByObject" ).toggleClass( "slds-backdrop--open" );
                        }
                        j$('#modalMigrateByObject').hide();
                        j$('#modalMigrateById').hide();
                        j$('#modalMigrateByObjectId').hide();
                    } else {
                        closeMigrateModal();
                        console.error('Error running the migration, message: '+event.message);
                    }
                }, 
                {escape: true}
            );
            
            
        }  
        
        //method used to check what migration user is doing and collect the info that will pass on to the controller
        function runSyncRemote(){
            document.getElementById('syncButton').style.pointerEvents = 'none';
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.NMTNotesMigrationController.syncRemote}',
                function(result, event){
                    console.log('element');
                    console.log(document.getElementById('bulkMigration:syncLabelPanel'));
                    document.getElementById('bulkMigration:syncLabelPanel').style.display = 'inline';
                    document.getElementById('bulkMigration:syncButtonPanel').style.display = 'none';
                    j$('#syncLabelDiv').removeClass('slds-hide');
                }, 
                {escape: true}
            );
        }
        
        //method used to call delete methon within the controller
        function deleteRemote(){
            closeDeleteModal();
            document.getElementById('deleteButton').style.pointerEvents = 'none';
            var objectNameDelete = j$('#bulkMigration\\:form\\:objectToDelete').val();
            sDate = document.getElementById('bulkMigration:form:sDate').innerHTML;
            eDate = document.getElementById('bulkMigration:form:eDate').innerHTML;
            var startDate = new Date(sDate.replace(" - ", "/").replace(" - ", "/"));
            var endDate = new Date(eDate.replace(" - ", "/").replace(" - ", "/"));
            var checkedOption = j$('#bulkMigration\\:form\\:optionOrderBy\\:0').is(":checked");
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.NMTNotesMigrationController.deleteRemote}',
                objectNameDelete, startDate, endDate, checkedOption,
                function(result, event){
                    
                    if (event.status) {
                        document.getElementById('byIdCheckbox').disabled = true;
                        document.getElementById('byObjectIdCheckbox').disabled = true;
                        document.getElementById('byObjectCheckbox').disabled = true;
                        document.getElementById('migrateButton').disabled = true;
                        document.getElementById('bulkMigration:form:theCountButton').disabled = true;
                        document.getElementById('bulkMigration:form:optionOrderBy:0').disabled = true;
                        document.getElementById('bulkMigration:form:optionOrderBy:1').disabled = true;
                        document.getElementById('bulkMigration:form:startDateIdOpp').onfocus = null;
                        document.getElementById('bulkMigration:form:endDateIdOpp').onfocus  = null;
                        document.getElementById('bulkMigration:form:unmigratedNotesPerObjectPanel').style.display = 'none';
                        document.getElementById('bulkMigration:form:byObjectIdPanel').style.display = 'none';
                        document.getElementById('bulkMigration:form:byIdPanel').style.display = 'none';
                        document.getElementById('bulkMigration:form:migratedNotesPerObjectPanel').style.display = 'none';
                        
                        document.getElementById('bulkMigration:form:inprogressDeleteLabel').style.display = 'inline';
                        document.getElementById('bulkMigration:form:quantityNotesPanel').style.display = 'none';
                        document.getElementById('bulkMigration:form:inprogressDeleteLabel').value = 'Deletion-Completed: 0%';
                        
                    } else if (event.type === 'exception') {
                        console.error('Error running the migration, exception: '+event.where);
                        if(event.message.includes( 'STORAGE_LIMIT_EXCEEDED' )){
                            errorLimitPrompt();
                        }
                        if(event.message.includes( 'Other Tool In Progress' )||event.message.includes( 'You don’t have permission' )){
                            location.reload(true);
                        }
                    } else {
                        console.error('Error running the migration, message: '+event.message);
                    }
                }, 
                {escape: true}
            );
            
            
        }
        
        //method used to if a salesforce internal error is thrown
        function checkSalesforceErrorRemote(){
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.NMTNotesMigrationController.detectInternalSalesforceError}',
                function(result, event){
                    if (event.status) {
                        console.log(result);
                        if(result!="-1"){
                            j$('#promptInternalSalesforceError').show();
                            if(result>0){
                                j$("#"+'promptInternalSalesforceErrorDiv' + " > p").html("We were able to convert about "+result+" notes, but an Unexpected error occurred during migration. Most of the times this error is related to special characters. We recommend you review your records to convert. If there are many, we recommend you select a smaller date range to detect the record(s).");
                            }else{
                                j$("#"+'promptInternalSalesforceErrorDiv' + " > p").html("Unexpected error occurred during migration. Most of the times this error is related to special characters. We recommend you review your records to convert. If there are many, we recommend you select a smaller date range to detect the record(s).");
                            }
                            
                            j$( "#modalInternalSalesforceError" ).toggleClass( "slds-backdrop--close" );
                            j$( "#modalInternalSalesforceError" ).toggleClass( "slds-backdrop--open" );
                        }
                    } else {
                        console.error('Error doing the refresh: '+event.message);
                    }
                }, 
                {escape: true}
            );
            
            
        }
        
        //methond user to refresh page, we empty old values and re load the page (refresh button)
        function refresh(){ 
            
            document.getElementById('errorIdsMessage').innerHTML = '';
            document.getElementById('promptTimeLimit').style.display = 'none';
            document.getElementById('bulkMigration:form:quantityNotesPanel').style.display = 'none';
            document.getElementById('migrateButton').disabled = true;
            document.getElementById('bulkMigration:form:notesPerObjectTable:selectUnselectAllObjectsCheckbox').checked = false;
            
            var disableCheck = document.getElementById('bulkMigration:form:unmigratedNotesPerObjectPanel').style.display;
            if(disableCheck == 'inline'){
                document.getElementById('byIdCheckbox').disabled = false;
                document.getElementById('byObjectIdCheckbox').disabled = false;
                document.getElementById('byObjectCheckbox').disabled = false;
                document.getElementById('bulkMigration:form:theCountButton').disabled = false;
                document.getElementById('bulkMigration:form:optionOrderBy:0').disabled = false;
                document.getElementById('bulkMigration:form:optionOrderBy:1').disabled = false;
                document.getElementById('runMigrationButtonById').style.pointerEvents = 'auto';
                document.getElementById('runMigrationButtonByObjectId').style.pointerEvents = 'auto';
                document.getElementById('runMigrationButtonByObject').style.pointerEvents = 'auto';
                document.getElementById('deleteButton').style.pointerEvents = 'auto';
                document.getElementById('bulkMigration:form:quantityNotesPanel').style.display = 'inline';
                document.getElementById('bulkMigration:form:startDateIdOpp').onfocus = function() {DatePicker.pickDate(true, 'bulkMigration:form:startDateIdOpp', false);};
                document.getElementById('bulkMigration:form:endDateIdOpp').onfocus  = function() {DatePicker.pickDate(true, 'bulkMigration:form:endDateIdOpp', false);};
            }else{
                document.getElementById('bulkMigration:form:startDateIdOpp').onfocus = null;
                document.getElementById('bulkMigration:form:endDateIdOpp').onfocus  = null;
            }
            document.getElementById('bulkMigration:form:byObjectIdPanel').style.display = 'none';
            document.getElementById('bulkMigration:form:byIdPanel').style.display = 'none';
            
            setdatepicker();
        }
        
        //mehtod to show textbox used for byId option and clean up the other options
        function byIdShowPanel(){
            document.getElementById('errorIdsMessage').innerHTML = '';
            var byIdCheckbox = document.getElementById('byIdCheckbox').checked;
            if(byIdCheckbox){
                selectUnselectAllObjects()
                document.getElementById('bulkMigration:form:byObjectIdPanel').style.display = 'none';
                document.getElementById('bulkMigration:form:unmigratedNotesPerObjectPanel').style.display = 'none';
                document.getElementById('bulkMigration:form:byIdPanel').style.display = 'inline';
                document.getElementById('bulkMigration:form:byIdToMigrate').focus();
                unselectObjects();
                document.getElementById('bulkMigration:form:byIdToMigrate').value = '';
                document.getElementById('bulkMigration:form:byObjectIdToMigrate').value = '';
            } else{
                document.getElementById('bulkMigration:form:byIdPanel').style.display = 'none';
            }
            enableDisableMigrateButton();
        }
        
        //mehtod to show textbox used for byObjectId option and clean up the other options
        function byObjectIdShowPanel(){
            document.getElementById('errorIdsMessage').innerHTML = '';
            var byObjectId = document.getElementById('byObjectIdCheckbox').checked;
            if(byObjectId){
                selectUnselectAllObjects();
                document.getElementById('bulkMigration:form:byIdPanel').style.display = 'none';
                document.getElementById('bulkMigration:form:unmigratedNotesPerObjectPanel').style.display = 'none';
                document.getElementById('bulkMigration:form:byObjectIdPanel').style.display = 'inline';
                document.getElementById('bulkMigration:form:byObjectIdToMigrate').focus();
                unselectObjects();
                document.getElementById('bulkMigration:form:byIdToMigrate').value = '';
                document.getElementById('bulkMigration:form:byObjectIdToMigrate').value = '';
            } else{
                document.getElementById('bulkMigration:form:byObjectIdPanel').style.display = 'none';
            }
            enableDisableMigrateButton();
        }
        
        //mehtod to show table used for byObject option and clean up the other options
        function byObjectShowPanel(){
            document.getElementById('errorIdsMessage').innerHTML = '';
            var byObject = document.getElementById('byObjectCheckbox').checked;
            if(byObject){
                document.getElementById('bulkMigration:form:byIdPanel').style.display = 'none';
                document.getElementById('bulkMigration:form:byObjectIdPanel').style.display = 'none';
                document.getElementById('bulkMigration:form:unmigratedNotesPerObjectPanel').style.display = 'inline';
                unselectObjects();
                document.getElementById('bulkMigration:form:byIdToMigrate').value = '';
                document.getElementById('bulkMigration:form:byObjectIdToMigrate').value = '';
            } else{
                document.getElementById('bulkMigration:form:unmigratedNotesPerObjectPanel').style.display = 'none';
            }
            enableDisableMigrateButton();
            
        }
        
        //method used to check that user only fill numers
        function inputLimiter(evt) {
            var charCode = (evt.which) ? evt.which : evt.keyCode;
            if(charCode == 110 || charCode == 190) {
                return true;
            }
            if (charCode != 46 && charCode > 31 
                && (charCode < 48 || charCode > 57 && charCode < 96 || charCode > 105)) {
                evt.preventDefault();
                return false;
            }
            return true;
        }
        
        //method used to check if user isnt putting any value within input when trying to migrate byobject option
        function emptyValueCheck(input) {
            if(Number(input.value) < 0 || !j$.isNumeric(Number(input.value))){
                input.value = 0;
            } else {
                if(input.value.charAt(0) === '0')
                    input.value = 0;
            }
            calculateTotalNotesToMigrate();
            
        }
        
        function valueCheck(input) {
            if(input.value.length < 10){
                document.getElementById('bulkMigration:form:theCountButton').disabled = true;
            }
            if(input.value.length > 10){
                input.value = input.value.substring(0, 10);
            }
        }
        
        //method used to count all the selected object inputs and update the total to migrate value
        //In case that the total is more than 200.000 message will show
        function calculateTotalNotesToMigrate(){
            var total = 0;
            var totalScheduler = 0;
            var SchedulerValue = document.getElementById('bulkMigration:form:schedulerSize');
            var schedulerIsActive = document.getElementById('bulkMigration:form:schedulerIsActive');
            j$('#bulkMigration\\:form\\:notesPerObjectTable tr').each(function(index) {
                var input = document.getElementById('bulkMigration:form:notesPerObjectTable:'+index+':notesToMigrate');
                var checked = j$('#bulkMigration\\:form\\:notesPerObjectTable\\:'+index+'\\:objectCheckbox').is(":checked");
                var quantity = j$('#bulkMigration\\:form\\:notesPerObjectTable\\:'+index+'\\:objectQuantity').html();
                
                if(checked && input && quantity){
                    if(Number(input.value) > Number(quantity)){
                        input.value = quantity;
                        total = total + Number(quantity);
                        if(Number(SchedulerValue.value) < Number(quantity)){
                            totalScheduler = totalScheduler + Number(SchedulerValue.value);
                        } else {
                            totalScheduler = totalScheduler + Number(quantity);  
                        }
                    } else{
                        total = total + Number(input.value);
                        if(Number(SchedulerValue.value) < Number(input.value)){
                            totalScheduler = totalScheduler + Number(SchedulerValue.value);
                        } else {
                            totalScheduler = totalScheduler + Number(input.value);
                        }
                    }           
                }
            });
            document.getElementById("totalNotesToMigrate").innerHTML = total;
            if(schedulerIsActive.value == 'true'){
                if(totalScheduler >= 100000){
                    document.getElementById("schedulerTotal").innerHTML = totalScheduler;
                    document.getElementById('contentVersionMsgScheduler').style.display = "inline";
                    document.getElementById('contentVersionMsgScheduler').style.color= "#C23934";
                } else {
                    document.getElementById("schedulerTotal").innerHTML = totalScheduler;
                    document.getElementById('contentVersionMsgScheduler').style.color= "#222";
                    document.getElementById('contentVersionMsgScheduler').style.display = "inline"; 
                }
            } else {
                document.getElementById('contentVersionMsgScheduler').style.display = "none"; 
            }
            if(schedulerIsActive.value === 'true' && totalScheduler >= 100000){
                document.getElementById("schedulerTotal").innerHTML = totalScheduler;
                document.getElementById('contentVersionMsgScheduler').style.display = "inline";
                document.getElementById('contentVersionMsgScheduler').style.color= "#C23934";
            }
            if(total >= 100000){
                document.getElementById('migrateButton').disabled = false; 
                document.getElementById('contentVersionMsg').style.display = "inline";
                document.getElementById('contentVersionMsg').style.color= "#C23934";
                //  document.getElementById('contentVersionMsg').style="display: inline; color: #C23934;";
                document.getElementById('amountToMigrate').style.color = "#C23934";
                // document.getElementById('amountToMigrate').style="color: #C23934;";
                
            }else{
                if(total == 0){
                    document.getElementById('migrateButton').disabled = true; 
                } else {
                    document.getElementById('migrateButton').disabled = false; 
                }
                document.getElementById('contentVersionMsg').style.display = "none";
                // document.getElementById('contentVersionMsg').style="display: none";
                document.getElementById('contentVersionMsg').style.color= "#222";
                document.getElementById('amountToMigrate').style.color = "#222";
                // document.getElementById('amountToMigrate').style="color: #222;";
                
            }
            //document.getElementById("totalSpan").innerHTML = total;
        }
        
        function selectUnselectAllUnimgratedObjectsUnselect(){
            document.getElementById('bulkMigration:form:notesPerObjectTable:selectUnselectAllObjectsCheckbox').checked = false; 
            document.getElementById('bulkMigration:form:unmigratedNotesPerObjectPanel').style.display = 'inline';
            enableDisableMigrateButton();            
        }
        
        function selectUnselectAllMigratedObjectsUnselect(){
            document.getElementById('bulkMigration:form:migratedNotesPerObjectPanel').style.display = 'inline';           
        }
        
        function verifyCountResult(){
            document.getElementById('bulkMigration:form:notesPerObjectTable:selectUnselectAllObjectsCheckbox').checked = false;
            var byObjectCheckbox = document.getElementById('byObjectCheckbox').checked;
            if(!byObjectCheckbox){
                document.getElementById('bulkMigration:form:unmigratedNotesPerObjectPanel').style.display = 'none';
            }
            
            var value = document.getElementById('bulkMigration:form:checkCountId').value;
            if(value == 'false'){
                timeoutPrompt(true);
            }
        }
        
        
        
        //for calendar component
        var arYears = getYears();
        
        function swapYears(){
            
            if(document.getElementById('calYearPicker') != null) {
                var select = document.getElementById('calYearPicker');
                var curValue = select.value; 
                var parentx = select.parentNode;
                parentx.removeChild(select);
                select = document.createElement('select');
                select.size = 1;
                select.id = 'calYearPicker';
                select.name = 'calYearPicker';
                parentx.appendChild(select);
            }
            if(select != null) {
                for(x=0;x<25;x++) {		
                    select.options[x] = new Option(arYears[x], arYears[x], false, false);
                }
            }
        }
        function getYears() {
            var out = [];
            // generate dates for the last 100 years
            var currentTime = new Date()
            var year = currentTime.getFullYear()
            try {
                for(x=0;x<25;x++) {
                    out[x] = x+year-24;
                }	
                
            } catch(error) {
                alert(error);		
            }	
            return out;
        }
        
        function createRemoteSite()
        {
            // Disable button
            document.getElementById('createremotesitebtn').disabled = true;
            // Calls the Metdata API from JavaScript to create the Remote Site Setting to permit Apex callouts
            var binding = new XMLHttpRequest();
            var request =
                '<?xml version="1.0" encoding="utf-8"?>' +
                '<env:Envelope xmlns:env="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">'+
                '<env:Header>' +
                '<urn:SessionHeader xmlns:urn="http://soap.sforce.com/2006/04/metadata">' +
                '<urn:sessionId>{!$Api.Session_ID}</urn:sessionId>' +
                '</urn:SessionHeader>' +
                '</env:Header>' +
                '<env:Body>' +
                '<upsertMetadata xmlns="http://soap.sforce.com/2006/04/metadata">' +
                '<metadata xsi:type="RemoteSiteSetting">' +
                '<fullName>NAMUpdatePageLayout</fullName>' +
                '<description>Remote Setting to Update Page Layouts</description>' +
                '<disableProtocolSecurity>false</disableProtocolSecurity>' +
                '<isActive>true</isActive>' +
                '<url>{!Host}</url>' +
                '</metadata>' +
                '</upsertMetadata>' +
                '</env:Body>' +
                '</env:Envelope>';
            binding.open('POST', '{!Host}/services/Soap/m/41.0');
            binding.setRequestHeader('SOAPAction','""');
            binding.setRequestHeader('Content-Type', 'text/xml');
            binding.onreadystatechange =
                function() {
                if(this.readyState==4) {
                    var parser = new DOMParser();
                    var doc  = parser.parseFromString(this.response, 'application/xml');
                    var errors = doc.getElementsByTagName('errors');
                    var messageText = '';
                    for(var errorIdx = 0; errorIdx < errors.length; errorIdx++)
                        messageText+= errors.item(errorIdx).getElementsByTagName('message').item(0).innerHTML + '\n';
                    //displayMetadataResponse(messageText);
                    window.location.reload();
                }
            }
            binding.send(request);
        }
        </script>
        <!--IF NO REMOTE SETTING -->
        <!-- Warning bubble -->
        <div class="{!showHideRemote} slds-grid">
            <div class="slds-size--2-of-2">                        
                <div class="slds-card slds-m-horizontal--small ">
                    <div class="slds-m-top--x-small slds-clearfix" style="margin-top: 1%; margin-bottom: 1%;">
                        <div id="processingRemoteSetting" class="slds-m-bottom-x-small slds-m-top--x-small slds-m-left--small slds-float--left" style="width: 60%">                                
                            The Notes Conversion tool uses the Tooling API to check for possible errors.  
                            As a result, the tool must be whitelisted as a remote site.
                        </div> 
                        <div  class="slds-float--right " >
                            <div>
                                <button id="createremotesitebtn" class="slds-float--left slds-button slds-button--neutral  slds-m-right--small slds-m-bottom--x-small" 
                                        type="button"
                                        onclick="createRemoteSite();" >Create Remote Site Setting</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!--IF NO DATA SYNCHRONIZED -->
        <!-- Warning bubble -->
        <apex:outputPanel id="syncDataPanel">
            <div id="syncData" class="{!showHideDataSync} {!notPermissionIssue} slds-grid">
                <div class="slds-size--2-of-2">                        
                    <div class="slds-card slds-m-horizontal--small ">
                        <div class="slds-m-top--x-small slds-clearfix" style="margin-top: 1%; margin-bottom: 1%;">
                            <div id="processingRemoteSetting" class="slds-m-bottom-x-small slds-m-top--x-small slds-m-left--small slds-float--left" style="width: 60%">                                
                                The Notes Conversion tool has changed the way we track which classic notes have been converted to enhanced notes.  
                                As a result, you'll need to run this script to proceed so that we can migrate data to enable you to delete the classic notes you've already converted.
                            </div>
                            <apex:outputPanel id="syncButtonPanel">
                                <div id="syncButtonDiv"  class="slds-float--right {!showHideButtonSync}" >
                                    <a href="#" onClick="runSyncRemote()"                                           
                                       id="syncButton" reRender="syncDataPanel"
                                       class="slds-float--left slds-button slds-button--neutral  slds-m-right--small slds-m-bottom--x-small">
                                        Run Script</a>
                                </div>
                            </apex:outputPanel>
                            <apex:outputPanel id="syncLabelPanel">
                                <div id="syncLabelDiv"  class="slds-float--right {!showHideLabelSync}" >
                                    <apex:outputLabel value="Running Script"
                                                      id="LabelSync"
                                                      styleClass="slds-m-bottom--x-small slds-m-top--xxx-small 
                                                                  slds-m-left--large slds-m-right--large inProgressLabel slds-badge slds-truncate"/>
                                </div>
                            </apex:outputPanel>
                        </div>
                    </div>
                </div>
            </div>
        </apex:outputPanel>
        <!--IF NO REMOTE SETTING ON PE -->
        <!-- Warning bubble -->
        <div class="{!showHideRemotePE} slds-grid">
            <div class="slds-size--2-of-2">                        
                <div class="slds-card slds-m-horizontal--small ">
                    <div class="slds-m-top--x-small slds-clearfix" style="margin-top: 1%; margin-bottom: 1%;">
                        <div id="processingRemoteSettingPE" class="slds-m-bottom-x-small slds-m-top--x-small slds-m-left--small slds-float--left" style="width: 60%">                                
                            You are in a {!orgEdition} and need to create the Remote Site manually.<br/><br/>
                            {!RemoteSettingConnectionWarningMessage}<br/>
                            
                        </div> 
                    </div>
                </div>
            </div>
        </div>
        <!-- IF NOTES ARE NOT ENABLED -->
        <div class="slds-notify slds-notify_alert slds-theme_alert-texture slds-theme_error {!notesNotEnabled}" role="alert">
            <span class="slds-assistive-text">error</span>
            <span class="slds-icon_container slds-icon-utility-ban slds-m-right_x-small" title="Description of icon when needed">
                <svg class="slds-icon slds-icon_x-small" aria-hidden="true">
                    <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#ban')}" />
                </svg>
            </span>
            <h2>To convert notes, &nbsp; <a href="/setup/notesSetupPage.apexp?retURL=%2Fui%2Fsetup%2FSetup%3Fsetupid%3DNotes&setupid=NotesSetupPage">enable enhanced notes in Setup.</a>
                &nbsp;&nbsp;<a href="https://help.salesforce.com/articleView?id=notes_setup_enable.htm">Learn More</a>
            </h2>
        </div>
        <!-- IF PERMISSION ISSUE -->
        <div class="{!permissionIssue} {!notesEnabled}">
            <c:NAMPermissionIssue ></c:NAMPermissionIssue> 
        </div>
        <!-- REQUIRED SLDS WRAPPER -->
        <div class="slds-grid {!notesEnabled} {!notPermissionIssue} {!showHide}">
            <div class="slds-notify_container">
                <div class="slds-notify slds-notify--alert slds-theme--error slds-theme--alert-texture slds-hide" id="errorLimitMsg" role="alert">
                    <button class="slds-button slds-notify__close slds-button--icon-inverse" title="Close" onClick="closeErrorModal()">
                        <svg class="slds-button__icon" aria-hidden="true">
                        </svg>
                        <span class="slds-assistive-text">Close</span>
                    </button>
                    <span class="slds-assistive-text">Error</span>
                    <h2>
                        <svg class="slds-icon slds-icon--small slds-m-right--x-small" aria-hidden="true">
                        </svg>Your org has reached its file storage limit. To delete notes, free up space.</h2>
                </div>
            </div>
            <div class="slds-notify_container">
                <div class="slds-notify slds-notify--alert slds-theme--error slds-theme--alert-texture slds-hide" id="errorLimitMsgMigrate" role="alert">
                    <button class="slds-button slds-notify__close slds-button--icon-inverse" title="Close" onClick="closeErrorModalMigrate()">
                        <svg class="slds-button__icon" aria-hidden="true">
                        </svg>
                        <span class="slds-assistive-text">Close</span>
                    </button>
                    <span class="slds-assistive-text">Error</span>
                    <h2>
                        <svg class="slds-icon slds-icon--small slds-m-right--x-small" aria-hidden="true">
                        </svg>Your org has reached its file storage limit. To convert notes, free up space.</h2>
                </div>
            </div>            
            <apex:form id="form" style="width: 100%">
                
                <apex:pageMessages id="messages"/>
                <div class="slds-size--1-of-1  slds-m-top--small" id="migration">
                    <!-- START  other process already started dialog -->
                    <div class="demo-only" id="promptOtherProcess" style="height: 4rem; display: none">
                        <div class="slds-notify_container slds-is-relative">
                            <div class="slds-notify slds-notify_toast slds-theme_info" role="alert">
                                <div class="slds-notify__content">
                                    <h2 class="slds-text-heading_small" id="messageOtherProcess"></h2>
                                </div> <!--
<button class="slds-button slds-button_icon slds-notify__close slds-button_icon-inverse" title="Close" >
<span class="slds-icon_container slds-icon-standard-article"
style="padding: 5px; margin-top: -2px;">
<span class="slds-icon slds-icon-text-warning slds-icon_x-small" 
aria-hidden="true">
<img src="{!URLFOR($Asset.SLDS, 'assets/icons/utility/warning_60.png')}"  
class="slds-icon_x-small"/>
</span>

</span>
</button> -->
                            </div>
                        </div>
                    </div>
                    <!-- END other process already started dialog --> 
                    <!-- START  new time limit dialog -->
                    <div class="demo-only" id="promptTimeLimit" style="height: 4rem; display: none">
                        <div class="slds-notify_container slds-is-relative">
                            <div class="slds-notify slds-notify_toast slds-theme--error slds-m-bottom--medium" role="alert">
                                <div class="slds-notify__content">
                                    <h2 class="slds-text-heading_small">Too many items for conversion.  Enter a smaller date range and try converting again.</h2>
                                </div> <!--
<button class="slds-button slds-button_icon slds-notify__close slds-button_icon-inverse" title="Close" >
<span class="slds-icon_container slds-icon-standard-article"
style="padding: 5px; margin-top: -2px;">
<span class="slds-icon slds-icon-text-warning slds-icon_x-small" 
aria-hidden="true">
<img src="{!URLFOR($Asset.SLDS, 'assets/icons/utility/warning_60.png')}"  
class="slds-icon_x-small"/>
</span>

</span>
</button> -->
                            </div>
                        </div>
                    </div>
                    <!-- END confirm dialog -->  
                    <div class="slds-grid slds-wrap slds-grid--pull-padded">
                        <div class="slds-col--padded slds-size--1-of-1 slds-m-bottom--medium">                        
                            <div class="slds-card slds-m-horizontal--small slds-p-around--small">
                                <div class="slds-m-top--x-small ">
                                    <apex:outputPanel id="datesNotesPanel">
                                        <div class="slds-clearfix">
                                            <div class="slds-m-top--xx-small slds-grid">
                                                <div class="slds-size--8-of-12 slds-float--left slds-text-heading--small slds-m-top--xxx-small 
                                                            slds-m-left--large slds-col" >                                    
                                                    Show items created between
                                                    <apex:inputField styleClass="date form-control slds-m-left--small slds-m-right--small" style="width: 120px;text-align: center;font-size: 14px; height:30px;border: 1px solid #d8dde6;border-radius: .25rem;" id="startDateIdOpp"  value="{!startDateCV.LegacyNoteConvertedDate__c}" onchange=" resetFC();"/>and
                                                    <apex:inputField styleClass="date form-control slds-m-left--small slds-m-right--small" style="width: 120px;text-align: center;font-size: 14px; height:30px;border: 1px solid #d8dde6;border-radius: .25rem;" id="endDateIdOpp"  value="{!endDateCV.LegacyNoteConvertedDate__c}" onchange=" resetFC();"/>
                                                    <apex:actionfunction action="{!ResetFinishCount}" name="resetFC" rerender="checkCountId"/>
                                                </div>
                                                
                                                
                                                <div class="slds-col slds-size_3-of-12 slds-m-top--small slds-m-right--large">
                                                    <apex:outputPanel id="orderRadioPanel">
                                                        <apex:selectRadio value="{!byCreateDateString}" id="optionOrderBy" style="font-size: 13px;">
                                                            <apex:selectOptions value="{!orderByOptions}"/>
                                                            <apex:actionSupport event="onchange" action="{!orderBy}" reRender="" />             
                                                        </apex:selectRadio>
                                                    </apex:outputPanel>
                                                </div>
                                                
                                                
                                                <div class="slds-col slds-size_2-of-12 slds-m-top--xxx-small slds-m-right--small slds-p-right--small">
                                                    <div class="slds-float--right"> 
                                                        <apex:commandButton value="Filter"
                                                                            id="theCountButton"
                                                                            action="{!Filter}"
                                                                            oncomplete="refresh()"
                                                                            disabled="{!disabledCount}"
                                                                            reRender="showmsg,unmigratedNotesdatePanel,migratedNotesdatePanel,unmigratedNotesPerObjectPanel,quantityNotesPanel,migrationTypePanel,migratedNotesPerObjectPanel,inprogressLabelPanel,inprogressDeletePanel,datesNotesPanel,dropdownPanel"
                                                                            styleClass="slds-button slds-button--neutral" style="width: 75px;"
                                                                            timeout="{!timeout}" status="actStatusId"/>
                                                        
                                                    </div>
                                                </div>
                                                
                                            </div>
                                            
                                            <!--    <div class="slds-col slds-size--4-of-12 slds-m-top--xx-small" style="margin-right: 5px; display: inline;">
Load items that are ready for conversion.
</div> -->
                                        </div>
                                        <div class="slds-m-left--large slds-p-left--small slds-m-top--xx-small slds-m-bottom--small">
                                            
                                            <apex:outputText id="errorMessageId" style="color: red;" value="{!validationDateMessage}"></apex:outputText>
                                        </div>
                                        <div class="slds-grid">
                                            <div class="slds-size_1-of-12"></div>
                                            <div class="slds-size_3-of-12 slds-text-heading--small slds-grid">
                                                <div class="slds-col slds-m-top--x-small">Filter by object:</div>
                                                <div class="slds-col slds-size_6-of-12">
                                                    
                                                    <div class="slds-m-top--xxx-small slds-m-bottom--small" style="font-size: 12px;">
                                                        <apex:outputPanel id="dropdownPanel">
                                                            <div class="slds-select_container">
                                                                <apex:selectList size="1" value="{!objectSelected}" styleClass="slds-select" >
                                                                    <apex:selectOptions value="{!objectsItems}" />
                                                                </apex:selectList>
                                                            </div>
                                                        </apex:outputPanel>
                                                    </div>
                                                    
                                                </div>
                                                
                                            </div>
                                        </div>
                                    </apex:outputPanel>
                                </div>
                            </div>
                        </div>
                        
                        <div class="slds-col--padded slds-size--1-of-1 slds-m-bottom--medium"> 
                            <div class="slds-card slds-m-horizontal--small slds-p-around--small">
                                <div class="slds-grid">
                                    <!-- LEFT PANEL -->
                                    <div class="slds-col--padded slds-size--1-of-2">                        
                                        <div class="slds-p-around--small">
                                            <!-- START Action Count Status -->
                                            <apex:outputpanel >
                                                <apex:actionstatus id="actStatusId" onstop="verifyCountResult();">
                                                    <apex:facet name="start">
                                                        <div class="waitingSearchDiv" id="el_loading" style="background-color: #DCD6D6; height: 100%;opacity:0.65;width:100%;">
                                                            <div class="waitingHolder slds-spinner slds-spinner_medium" role="status">
                                                                <span class="slds-assistive-text">Loading</span>
                                                                <div class="slds-spinner__dot-a"></div>
                                                                <div class="slds-spinner__dot-b"></div>
                                                            </div>
                                                        </div>
                                                    </apex:facet>
                                                </apex:actionstatus>
                                            </apex:outputpanel>
                                            <!-- END Action Status -->
                                            
                                            <!-- START Internal Salesforce Error -->
                                            <div role="alertdialog" tabindex="-1" aria-labelledby="prompt-heading-id" 
                                                 aria-describedby="prompt-message-wrapper" class="slds-modal slds-fade-in-open slds-modal--prompt slds-hide" id="promptInternalSalesforceError">
                                                <div class="slds-modal__container">
                                                    <div class="slds-modal__header slds-theme--error slds-theme--alert-texture">
                                                        <h2 class="slds-text-heading--medium" id="prompt-heading-id">Internal Salesforce Error</h2>                                        
                                                    </div>
                                                    <div class="slds-modal__content slds-p-around--medium" id="promptInternalSalesforceErrorDiv">   
                                                        <p></p>
                                                    </div>
                                                    <div class="slds-modal__footer slds-theme--default">
                                                        <a href="#" class="slds-button slds-button--neutral  slds-m-right--small slds-m-bottom--x-small" onClick="closeInternalErrorModal()">Close</a>
                                                        <a href="#" class="slds-button slds-button--neutral  slds-m-right--small slds-m-bottom--x-small" onClick="abortOperation()">Abort Conversion</a>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="slds-backdrop slds-backdrop--close " id="modalInternalSalesforceError"></div>  
                                            <!-- END Internal Salesforce Error -->
                                            
                                            <!-- START confirm by Id dialog -->
                                            <div role="alertdialog" tabindex="-1" aria-labelledby="prompt-heading-id" 
                                                 aria-describedby="prompt-message-wrapper" class="slds-modal slds-fade-in-open slds-modal--prompt slds-hide" id="promptMigrateById">
                                                <div class="slds-modal__container">
                                                    <div class="slds-modal__header slds-theme--success slds-theme--alert-texture">
                                                        <h2 class="slds-text-heading--medium" id="prompt-heading-id">Convert Notes by Id?</h2>                                        
                                                    </div>
                                                    <div class="slds-modal__content slds-p-around--medium">   
                                                        <p>You're converting Classic notes to Enhanced notes</p>
                                                        <br/>
                                                        <p>This conversion may take some time, depending on the number of notes. You can keep working in Salesforce during conversion. You’ll receive an email when it's complete.</p>
                                                        
                                                    </div>
                                                    <div class="slds-modal__footer slds-theme--default">
                                                        <a href="#" class="slds-button slds-button--neutral  slds-m-right--small slds-m-bottom--x-small" onClick="closeMigrateModal()">Cancel</a>
                                                        <a href="#" onClick="runMigrationRemote('byId')" onComplete="enableDisableMigrateButton()"                                           
                                                           id="runMigrationButtonById" reRender="form, promptMigrateById"
                                                           class="slds-button slds-button--neutral slds-m-right--small slds-m-bottom--x-small">Convert Notes</a>
                                                        
                                                        
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="slds-backdrop slds-backdrop--close" id="modalMigrateById"></div>  
                                            <!-- END confirm dialog -->
                                            
                                            <!-- START confirm Delete dialog -->
                                            <div role="alertdialog" tabindex="-1" aria-labelledby="prompt-heading-id" 
                                                 aria-describedby="prompt-message-wrapper" class="slds-modal slds-fade-in-open slds-modal--prompt slds-hide" id="promptDelete">
                                                <div class="slds-modal__container">
                                                    <div class="slds-modal__header slds-theme--error slds-theme--alert-texture">
                                                        <h2 class="slds-text-heading--medium" id="prompt-heading-id">Delete converted Notes?</h2>                                        
                                                    </div>
                                                    <div class="slds-modal__content slds-p-around--medium">              
                                                        <p>You're deleting all Classic notes that have been converted for <span id="objectName"></span>.</p>
                                                    </div>
                                                    <div class="slds-modal__footer slds-theme--default">
                                                        <apex:inputHidden value="{!objectName}" id="objectToDelete"/>
                                                        <a href="#" class="slds-button slds-button--neutral  slds-m-right--small slds-m-bottom--x-small" onClick="closeDeleteModal()">Cancel</a>
                                                        <a href="#" onClick="deleteRemote()" 
                                                           id="deleteButton"
                                                           class="slds-button slds-button--neutral  slds-m-right--small slds-m-bottom--x-small">Delete</a> 
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="slds-backdrop slds-backdrop--close" id="modalDelete"></div>  
                                            <!-- END confirm dialog --> 
                                            
                                            <!-- START confirm by Object Id dialog -->
                                            <div role="alertdialog" tabindex="-1" aria-labelledby="prompt-heading-id" 
                                                 aria-describedby="prompt-message-wrapper" class="slds-modal slds-fade-in-open slds-modal--prompt slds-hide" id="promptMigrateByObjectId">
                                                <div class="slds-modal__container">
                                                    <div class="slds-modal__header slds-theme--success slds-theme--alert-texture">
                                                        <h2 class="slds-text-heading--medium" id="prompt-heading-id">Convert Notes by related record ID?</h2>                                        
                                                    </div>
                                                    <div class="slds-modal__content slds-p-around--medium">              
                                                        <p>You're converting Classic notes to Enhanced notes</p>
                                                        <br/>
                                                        <p>This takes some time depending on the number of notes. You can keep working in Salesforce during conversion. When the conversion is complete, you get a confirmation email.</p>
                                                        
                                                    </div>
                                                    <div class="slds-modal__footer slds-theme--default">
                                                        <a href="#" class="slds-button slds-button--neutral  slds-m-right--small slds-m-bottom--x-small" onClick="closeMigrateModal()">Cancel</a>
                                                        <a href="#" onClick="runMigrationRemote('byObjectId')" onComplete="enableDisableMigrateButton()"                                           
                                                           id="runMigrationButtonByObjectId" reRender="unmigratedNotesPerObjectPanel, promptMigrateByObjectId"
                                                           class="slds-button slds-button--neutral slds-m-right--small slds-m-bottom--x-small">Convert Notes</a>
                                                        
                                                        
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="slds-backdrop slds-backdrop--close" id="modalMigrateByObjectId"></div>  
                                            <!-- END confirm dialog -->
                                            
                                            <!-- START confirm by Object dialog -->
                                            <div role="alertdialog" tabindex="-1" aria-labelledby="prompt-heading-id" 
                                                 aria-describedby="prompt-message-wrapper" class="slds-modal slds-fade-in-open slds-modal--prompt slds-hide" id="promptMigrateByObject">
                                                <div class="slds-modal__container">
                                                    <div class="slds-modal__header slds-theme--success slds-theme--alert-texture">
                                                        <h2 class="slds-text-heading--medium" id="prompt-heading-id">Convert Notes by Object?</h2>                                        
                                                    </div>
                                                    <div class="slds-modal__content slds-p-around--medium">              
                                                        <p>You're converting Classic notes to Enhanced notes.</p>
                                                        <br/>
                                                        <p>This conversion may take some time, depending on the number of notes. You can keep working in Salesforce during conversion. You'll receive an email when it's complete.</p>
                                                        <apex:outputPanel id="messagesPopup">
                                                            <div id="contentVersionMsg" 
                                                                 class="slds-text-color--default"
                                                                 style="display: none;">
                                                                Note: Most orgs have a daily limit of 200,000 file versions.
                                                            </div>
                                                            <div id="contentVersionMsgScheduler" 
                                                                 class="slds-text-color--default"
                                                                 style="display: none;">
                                                                <br/>
                                                                Scheduler is Enabled. Scheduler size is {!schedulerSize} for each object, a total of <span id="schedulerTotal"></span> will be created for the day.
                                                            </div>
                                                        </apex:outputPanel>
                                                    </div>
                                                    <div class="slds-modal__footer slds-theme--default">
                                                        <a href="#" class="slds-button slds-button--neutral  slds-m-right--small slds-m-bottom--x-small" onClick="closeMigrateModal()">Cancel</a>
                                                        <a href="#" onClick="runMigrationRemote('byObject')" onComplete="enableDisableMigrateButton();"                                           
                                                           id="runMigrationButtonByObject" reRender="promptMigrateByObject,datesNotesPanel, messagesPopup"
                                                           class="slds-button slds-button--neutral slds-m-right--small slds-m-bottom--x-small">Convert Notes</a>
                                                        
                                                        
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="slds-backdrop slds-backdrop--close" id="modalMigrateByObject"></div>  
                                            <!-- END confirm dialog -->
                                            
                                            
                                            
                                            
                                            <div>
                                                
                                                <div class="slds-clearfix">
                                                    <div class="slds-float--left slds-text-heading--small" style="width: 70%">                                    
                                                        Public and Private Notes to Convert
                                                        <div class="mouseOverInfoOuter" id="searchInvoiceHelper" onfocus="addMouseOver(this)" onmouseover="addMouseOver(this)" tabindex="0">
                                                            <img src="/s.gif" alt="" class="infoIcon" title="" />
                                                            <div class="mouseOverInfo" id="searchInvoiceHelperText" style="display: none; opacity: -0.19999999999999996; left: 1px;">
                                                                <div class="slds-popover__body" style="font-size:13px">
                                                                    Use <strong>convert by note ID</strong> or <strong>convert by related record ID</strong> to test the conversion 
                                                                    process on a small number of records.
                                                                    When you are ready to convert your notes in batches based on the parent object type, use <strong>bulk conversion 
                                                                    by object type. </strong>
                                                                    The total number of notes to convert is at the bottom of 
                                                                    the table. Daily file limits include notes and files created by other users. 
                                                                    If you exceed the daily file limit, you can’t create notes or files in 
                                                                    your org until the next day. 
                                                                    
                                                                </div>
                                                            </div>
                                                        </div>
                                                        
                                                        
                                                    </div>
                                                    
                                                    <div class="slds-float--right"> 
                                                        <button id="migrateButton" class="migrateButton slds-float--left slds-button slds-button--neutral  slds-m-right--small slds-m-bottom--x-small" 
                                                                type="button"
                                                                disabled = "true"
                                                                onclick="migrationPrompt()" >Convert</button>
                                                        
                                                        
                                                        <!-- Warning bubble -->
                                                        <div style="{!otherToolInProgress}" id="inProgress" >
                                                            
                                                            <div class="mouseOverInfoOuter" id="errorHelper" onfocus="addMouseOver(this)" 
                                                                 onmouseover="addMouseOver(this)" tabindex="0">
                                                                
                                                                <span class="slds-icon_container slds-icon-standard-article"
                                                                      style="padding: 5px; margin-top: 2px;">
                                                                    <span class="slds-icon slds-icon-text-warning slds-icon_x-small" 
                                                                          aria-hidden="true">
                                                                        <img src="{!URLFOR($Asset.SLDS, 'assets/icons/utility/warning_60.png')}"  
                                                                             class="slds-icon_x-small"/>
                                                                    </span>
                                                                    
                                                                </span>
                                                                
                                                                
                                                                <div class="mouseOverInfo" id="errorHelperText" 
                                                                     style="display: none; opacity: -0.19999999999999996; left: 1px;">
                                                                    <div class="slds-popover__body" style="font-size:13px">
                                                                        You're currently converting attachments to files. When that process completes, you can convert notes.
                                                                    </div>
                                                                </div>
                                                            </div> 
                                                        </div><!-- Warning bubble -->
                                                        
                                                    </div>
                                                </div>
                                                
                                                <div class="slds-text-color_weak" style="width: 70%">
                                                    <p>Convert your public and private Classic notes as a bulk process or individually.</p><br/>
                                                    Test the conversion on a small number of records using <strong>Convert by related record ID</strong> or <strong>Convert by note ID</strong>.
                                                    When you are ready to convert your notes in batches based on the parent object type, use <strong>Bulk conversion 
                                                    by object type. </strong><br/>
                                                    <br/><p>Daily limits for the number of documents and versions apply to notes conversions. 
                                                    If you exceed the daily limit, you can't create notes or files in your org until the next day. <a href="https://developer.salesforce.com/docs/atlas.en-us.salesforce_app_limits_cheatsheet.meta/salesforce_app_limits_cheatsheet/salesforce_app_limits_overview.htm" target = "_blank">See Salesforce Files Limits</a></p>
                                                    <br/>
                                                </div>
                                                
                                                <!--<div class="slds-text-color_weak slds-m-left--x-small" style="width: 70%">
<a href="#" onClick="timeoutPrompt(false);" id="changeDateId" disabled="{!disabledCount}">Change Date Range</a> 
</div>-->
                                                
                                                <apex:outputPanel id="migrationTypePanel" >
                                                    <fieldset class="slds-form-element slds-m-top--small">
                                                        <div class="slds-form-element__control slds-m-bottom--x-small slds-m-top--xxx-small 
                                                                    slds-float--left">
                                                            <label for="byObjectRadio">
                                                                <input type="radio" disabled = "true" name="options" checked="true" onclick="byObjectShowPanel()" id="byObjectCheckbox"/>
                                                                <span class="slds-radio--faux"></span>
                                                                <span class="slds-form-element__label">
                                                                    Bulk conversion by object type (recommended)
                                                                </span>
                                                            </label>
                                                            
                                                            <br/>
                                                            <label for="byObjectIdRadio">
                                                                <input disabled = "true" type="radio" name="options" onclick="byObjectIdShowPanel()" id="byObjectIdCheckbox"/>
                                                                <span class="slds-radio--faux"></span>
                                                                <span class="slds-form-element__label">
                                                                    Convert by related record ID
                                                                </span>
                                                            </label>
                                                            <p class="slds-form-element__label">To enter multiple IDs, enter each ID on a new line or separate the IDs with commas.</p>
                                                            
                                                            <br/>
                                                            
                                                            <label for="byIdRadio">
                                                                <input type="radio" disabled = "true" name="options" onclick="byIdShowPanel()" id="byIdCheckbox"/>
                                                                <span class="slds-radio--faux"></span>
                                                                <span class="slds-form-element__label">
                                                                    Convert by note ID
                                                                </span>
                                                            </label>
                                                            <p class="slds-form-element__label" style="width: 100%;">To enter multiple IDs, enter each ID on a new line or separate the IDs with commas.</p>
                                                            
                                                            <br/>
                                                        </div>
                                                    </fieldset>   
                                                </apex:outputPanel>
                                                <apex:outputPanel id="unmigratedNotesdatePanel">
                                                    <div class="slds-float--right slds-text-title slds-p-top--small">
                                                        <!--Date&nbsp; --> <apex:outputText id="sDate" styleClass="slds-hide" value="{0, date,  yyyy - MM - dd }" >
                                                        <apex:param value="{!startDate}"/> 
                                                        </apex:outputText>
                                                        <!--<apex:outputText id="sDate2" styleClass="slds-hide"  value="{0, date, yyyy - MM - dd}" >
<apex:param value="{!startDate}"/> 
</apex:outputText>  &nbsp;to&nbsp;  -->
                                                        <apex:outputText id="eDate" value="{0, date,  yyyy - MM - dd }" styleClass="slds-hide">
                                                            <apex:param value="{!endDate}"/> 
                                                        </apex:outputText>
                                                        <!-- <apex:outputText id="eDate2" styleClass="slds-hide" value="{0, date, yyyy - MM - dd}">
<apex:param value="{!endDate}"/> 
</apex:outputText>-->
                                                        <c:formattedDate date_value_start="{!startDate}" date_value_end="{!endDate}"></c:formattedDate>
                                                    </div>
                                                    <br/>
                                                </apex:outputPanel>
                                                <apex:outputPanel id="inprogressLabelPanel" >
                                                    <apex:outputLabel value="{!inProgressValue}"
                                                                      id="inprogressLabel"
                                                                      styleClass="slds-m-bottom--x-small slds-m-top--xxx-small 
                                                                                  slds-m-left--large inProgressLabel slds-badge slds-truncate"
                                                                      style="{!inProgressLabel}"/>
                                                </apex:outputPanel>
                                                
                                                
                                                
                                            </div>
                                            
                                            <apex:outputPanel id="byIdPanel" style="display: none;" >
                                                <apex:inputTextarea styleClass="slds-textarea"
                                                                    id="byIdToMigrate" onkeyup="enableDisableMigrateButton()" disabled="{!inProgress}">
                                                    
                                                </apex:inputTextarea>
                                                
                                            </apex:outputPanel>
                                            
                                            <apex:outputPanel id="byObjectIdPanel" style="display: none;">
                                                <apex:inputTextarea styleClass="slds-textarea"
                                                                    id="byObjectIdToMigrate" onkeyup="enableDisableMigrateButton()">
                                                    
                                                </apex:inputTextarea>
                                                
                                            </apex:outputPanel>
                                            <apex:outputPanel id="unmigratedNotesPerObjectPanel" style="{!inProgressLabelTable}">
                                                <apex:inputHidden id="checkCountId" value="{!finishCount}"/>
                                                <div id="notesPerObjectDiv">
                                                    <apex:dataTable value="{!notesPerObject}"
                                                                    var="e"
                                                                    id="notesPerObjectTable"
                                                                    headerClass="slds-text-title--caps"
                                                                    styleClass="slds-table slds-table--bordered slds-table--cell-buffer">
                                                        
                                                        <apex:column width="20">
                                                            <apex:facet name="header">
                                                                <apex:inputCheckbox onclick="selectUnselectAllObjects()" id="selectUnselectAllObjectsCheckbox">
                                                                    
                                                                </apex:inputCheckbox>
                                                            </apex:facet>
                                                            <apex:inputCheckbox value="{!e.selected}"
                                                                                onclick="enableDisableMigrateButton()"
                                                                                id="objectCheckbox">
                                                                
                                                            </apex:inputCheckbox>
                                                        </apex:column>
                                                        
                                                        <apex:column >
                                                            <apex:facet name="header">Object Type</apex:facet>
                                                            <apex:outputText id="objectName" value="{!e.objectName}" />
                                                        </apex:column>
                                                        <apex:column >
                                                            <apex:facet name="header">QUANTITY</apex:facet>
                                                            <apex:outputText id="objectQuantity" value="{!e.quantity}" />                                       
                                                        </apex:column>
                                                        <apex:column width="380" >
                                                            <apex:facet name="header">TO CONVERT</apex:facet> 
                                                            <apex:inputText id="notesToMigrate" styleClass="notesToMigrateInputs"
                                                                            title="Empty to convert all in this object" value="{!e.quantity}"
                                                                            style="display: none;" onKeyDown="inputLimiter(event);" onKeyUp="emptyValueCheck(this);" maxlength="10">
                                                            </apex:inputText>
                                                            
                                                        </apex:column>
                                                        
                                                    </apex:dataTable>
                                                    
                                                    <apex:outputPanel rendered="{!EmptyObjects}" id="emptyObjects">
                                                        <apex:inputHidden id="noRecords" value="{!noRecords}"/>
                                                        <div class="slds-panel slds-text-body--regular slds-p-top--large slds-p-bottom--large"
                                                             style="text-align: center;">
                                                            No records
                                                        </div>
                                                        
                                                    </apex:outputPanel>
                                                    
                                                </div>
                                                <div class="slds-float--right slds-text-color--default slds-m-right--x-small slds-m-top--small  slds-m-bottom--small slds-text-align--right" style="width: 100%;">
                                                    <span  id="amountToMigrate">
                                                        Total to convert: <span id="totalNotesToMigrate">0</span>
                                                    </span>
                                                    <br/>
                                                </div>
                                                <apex:inputHidden id="schedulerIsActive" value="{!schedulerIsActive}"/>
                                                <apex:inputHidden id="schedulerSize" value="{!schedulerSize}"/>
                                                
                                                
                                            </apex:outputPanel>
                                            <div class="slds-clearfix"> 
                                                <div id="errorIdsMessage" class="slds-text-color_weak slds-m-top--large slds-m-bottom--small" style="word-break: break-all;"></div>
                                                
                                                <div  class="slds-text-title slds-m-top--large slds-m-bottom--small">
                                                    Your org is {!org.OrganizationType}. Check
                                                    <a href="{!storageURL}"  target = "_blank">  
                                                        storage usage</a>
                                                    and monitor the status of 
                                                    <a href="{!apexjobsURL}"  target = "_blank">  
                                                        Apex jobs.
                                                    </a>
                                                    <p class="slds-m-top--large">
                                                        Need help? Ask in our <a href="{!sucessComumunityGroupURL}"  target = "_blank">  Success Community Group.</a>
                                                    </p>
                                                    <p>
                                                        Are you finding this tool useful? Let others know by writing a review on the <a href="{!appExchangeURL}"  target = "_blank">  AppExchange.</a>
                                                    </p>
                                                    
                                                </div>
                                                
                                            </div>
                                        </div>
                                        
                                    </div> <!-- END LEFT PANEL -->
                                    <!-- RIGHT PANEL -->
                                    <div class="slds-col--padded slds-size--1-of-2" style="border-left: 2px solid #54698d;" id="rightPanel"> 
                                        <div class="slds-p-around--small">
                                            <div class="slds-text-heading--small">
                                                Converted Public and Private Notes
                                                <div class="slds-float--right">
                                                    
                                                    <apex:commandButton value="Refresh"
                                                                        id="unmigrateButtonRefresh"
                                                                        action="{!Refresh}"
                                                                        onclick="checkSalesforceErrorRemote();"
                                                                        oncomplete="refresh();"
                                                                        timeout="{!timeout}" status="actStatusId"
                                                                        reRender="unmigratedNotesPerObjectPanel,quantityNotesPanel,migratedNotesPerObjectPanel,migrationTypePanel,inprogressLabelPanel,inprogressDeletePanel, contentVersionMsgScheduler"
                                                                        styleClass="slds-float--left slds-button slds-button--neutral"/>
                                                </div>
                                            </div>
                                            <div class="slds-text-color_weak slds-m-top--small" style="width: 80%">
                                                These converted Classic notes are now available in your org as Enhanced notes. 
                                                Delete the converted notes to free up storage space. 
                                                After you delete converted notes, you can't recover them.
                                                
                                            </div>
                                            <apex:outputPanel id="migratedNotesdatePanel">
                                                <div class="slds-float--right slds-text-title slds-p-top--large">
                                                    <!--Date&nbsp; <apex:outputText id="dsdate" value="{0, date, yyyy - MM - dd}">
<apex:param value="{!startDate}"/> 
</apex:outputText>
<apex:outputText id="dsdate2" styleClass="slds-hide" value="{0, date, yyyy - MM - dd}">
<apex:param value="{!startDate}"/> 
</apex:outputText> &nbsp;to &nbsp;
<apex:outputText id="dedate"  value="{0, date, yyyy - MM - dd}">
<apex:param value="{!endDate}"/> 
</apex:outputText>
<apex:outputText id="dedate2" styleClass="slds-hide" value="{0, date, yyyy - MM - dd}">
<apex:param value="{!endDate}"/> 
</apex:outputText>-->
                                                    <c:formattedDate date_value_start="{!startDate}" date_value_end="{!endDate}"></c:formattedDate>
                                                </div>
                                            </apex:outputPanel>
                                            <apex:outputPanel id="quantityNotesPanel" style="display: none">
                                                <dl class="slds-size--1-of-1 slds-dl_horizontal slds-m-top--small slds-m-bottom--medium">
                                                    <dt class="slds-dl_horizontal__label slds-m-top--x-small" style="width: 50%;">Total Classic note:</dt>
                                                    <div id="converted" class="slds-text-color_default" style="width: 15%;">
                                                        {!TotalLegacyNotes}
                                                    </div>
                                                    <dt class="slds-dl_horizontal__label slds-m-top--x-small" style="width: 50%;">Converted Classic notes(can be deleted):</dt>
                                                    <dd class="slds-dl_horizontal__detail slds-m-top--x-small" style="width: 30%;">
                                                        <div id="converted" class="slds-text-color_default">
                                                            <apex:outputText value="{!numberOfConvertedNotes}" />
                                                            
                                                            
                                                        </div>
                                                    </dd>
                                                    <dt class="slds-dl_horizontal__label slds-m-top--x-small" style="width: 50%;">Unconverted Classic notes:</dt>
                                                    <dd class="slds-dl_horizontal__detail slds-m-top--x-small" style="width: 10%;">
                                                        <div id="toConvert" class=" slds-text-color_default">
                                                            <apex:outputText value="{!numberOfUnconvertedNotes}" />
                                                        </div>
                                                    </dd>
                                                </dl>     
                                            </apex:outputPanel>
                                            <apex:outputPanel id="inprogressDeletePanel" >
                                                <apex:outputLabel value="{!inProgressDeleteValue}" 
                                                                  id="inprogressDeleteLabel"
                                                                  styleClass="slds-m-bottom--x-small slds-m-top--xxx-small 
                                                                              slds-m-left--large inProgressLabel slds-badge slds-truncate"
                                                                  style="{!inProgressDeleteLabel}"/>
                                            </apex:outputPanel>
                                            <apex:outputPanel id="migratedNotesPerObjectPanel" style="{!inProgressLabelTable}">
                                                <apex:dataTable value="{!notesMigratedPerObject}" var="e" id="migratedNotesPerObjectTable"
                                                                headerClass="slds-text-title--caps"
                                                                styleClass="slds-table slds-table--bordered slds-table--cell-buffer">
                                                    
                                                    <apex:column >
                                                        <apex:facet name="header">OBJECT</apex:facet>
                                                        <apex:outputText id="objectName" value="{!e.objectName}" />
                                                        
                                                    </apex:column>
                                                    
                                                    <apex:column >
                                                        <apex:facet name="header">QUANTITY</apex:facet>
                                                        {!e.quantity}
                                                    </apex:column>
                                                    
                                                    <apex:column >
                                                        <apex:facet name="header"></apex:facet>
                                                        <apex:outputLink value="#" onclick="deletePrompt('{!e.objectName}')" id="trash">
                                                            <span class="slds-avatar slds-avatar--x-small">
                                                                <img src="{!URLFOR($Resource.NMTicon, 'icon/delete.png')}" />
                                                            </span>
                                                        </apex:outputLink>
                                                    </apex:column>
                                                </apex:dataTable>
                                                <apex:outputPanel rendered="{!EmptyMigratedObjects}">
                                                    <div class="slds-panel slds-align--absolute-center slds-text-body--regular slds-p-top--large slds-p-bottom--large">
                                                        No records
                                                    </div>
                                                    
                                                </apex:outputPanel>
                                                
                                            </apex:outputPanel>
                                        </div>
                                    </div><!-- END RIGHT PANEL --> 
                                </div>
                                <div class="slds-text-title slds-text-align_right">
                                    Package Version {!version}
                                </div>
                            </div>
                        </div>
                    </div> <!-- END GRID -->
                </div>
            </apex:form>
        </div>  
    </html>
</apex:page>